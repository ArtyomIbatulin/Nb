// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
  output   = "../generated/prisma"
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

// https://www.prisma.io/docs/orm/overview/databases/mongodb

model User {
  id String @id @default(auto()) @map("_id") @db.ObjectId

  email     String @unique
  password  String
  name      String
  avatarUrl String
  role      Role   @default(USER)

  cart     Cart? // one to one 
  wishlist Wishlist? // one to one 
  orders   Order[] // one to many

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Book {
  id String @id @default(auto()) @map("_id") @db.ObjectId

  name        String
  imgUrl      String
  price       String
  description String

  category   Category @relation(fields: [categoryId], references: [id]) // one to many
  categoryId String   @db.ObjectId

  // author    User?   @relation(fields: [authorId], references: [id])
  // authorId  String  @db.ObjectId

  // authors Author[] many to many

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Author {
  id String @id @default(auto()) @map("_id") @db.ObjectId

  name String @unique

  // books Book[] 

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Cart {
  id String @id @default(auto()) @map("_id") @db.ObjectId

  user   User   @relation(fields: [userId], references: [id])
  userId String @unique @db.ObjectId // one to one 

  items CartItem[]

  totalAmount Int    @default(0)
  token       String

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model CartItem {
  id String @id @default(auto()) @map("_id") @db.ObjectId

  // book or bookItem ??? 

  cart   Cart   @relation(fields: [cartId], references: [id])
  cartId String @db.ObjectId

  quantity Int

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Wishlist {
  id String @id @default(auto()) @map("_id") @db.ObjectId

  user   User   @relation(fields: [userId], references: [id])
  userId String @unique @db.ObjectId // one to one 

  items WishlistItem[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model WishlistItem {
  id String @id @default(auto()) @map("_id") @db.ObjectId

  // book or bookItem ??? 

  wishlist   Wishlist @relation(fields: [wishlistId], references: [id])
  wishlistId String   @db.ObjectId

  quantity Int

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Order {
  id String @id @default(auto()) @map("_id") @db.ObjectId

  user   User   @relation(fields: [userId], references: [id])
  userId String @unique @db.ObjectId

  token      String
  totalAmout Int
  status     Status
  paymentId  String?

  items Json // список товаров в заказе 

  name    String
  email   String
  phone   String
  address String
  comment String? // инфа о заказчике со страницы оформления заказа 

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Category {
  id String @id @default(auto()) @map("_id") @db.ObjectId

  name  String @unique
  books Book[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Comment {
  id String @id @default(auto()) @map("_id") @db.ObjectId

  text String

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Rating {
  id String @id @default(auto()) @map("_id") @db.ObjectId

  rating String

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

enum Role {
  USER
  ADMIN
}

enum Status {
  PENDING
  SUCCEEDED
  CANCELLED
}
